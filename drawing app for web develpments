<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CanvasDraw - Simple Drawing App</title>
    <style>
        :root {
            --primary: #4a6fa5;
            --secondary: #166088;
            --accent: #4fc3dc;
            --light: #f8f9fa;
            --dark: #212529;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--light);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: background 0.3s ease;
        }

        .auth-container, .app-container {
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .app-container {
            display: none;
        }

        h1 {
            color: var(--primary);
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--dark);
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
            transition: border 0.3s ease;
        }

        input:focus {
            outline: none;
            border-color: var(--primary);
        }

        button {
            width: 100%;
            padding: 0.75rem;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        button:hover {
            background-color: var(--secondary);
        }

        .switch-form {
            margin-top: 1rem;
            text-align: center;
            color: var(--dark);
        }

        .switch-form button {
            background: none;
            border: none;
            color: var(--primary);
            text-decoration: underline;
            cursor: pointer;
            padding: 0;
            display: inline;
            width: auto;
        }

        canvas {
            display: block;
            margin: 0 auto;
            border: 1px solid #ddd;
            background-color: white;
            border-radius: 5px;
            cursor: crosshair;
        }

        .toolbar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .tool-group {
            display: flex;
            gap: 0.5rem;
        }

        .tool-btn {
            background-color: var(--light);
            color: var(--dark);
            border: 1px solid #ddd;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
        }

        .tool-btn.active {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logout-btn {
            width: auto;
            padding: 0.5rem 1rem;
        }

        @media (max-width: 600px) {
            .auth-container, .app-container {
                padding: 1.5rem;
                width: 95%;
            }
            
            .toolbar {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Authentication Section -->
    <div class="auth-container" id="auth-container">
        <div id="login-form">
            <h1>Welcome to CanvasDraw</h1>
            <img src="https://placehold.co/600x300" alt="Colorful abstract painting with vibrant brush strokes on a digital canvas" />
            <div class="form-group">
                <label for="login-email">Email</label>
                <input type="email" id="login-email" placeholder="Enter your email">
            </div>
            <div class="form-group">
                <label for="login-password">Password</label>
                <input type="password" id="login-password" placeholder="Enter your password">
            </div>
            <button id="login-btn">Login</button>
            <div class="switch-form">
                <span>Don't have an account? </span>
                <button id="show-register">Register</button>
            </div>
        </div>

        <div id="register-form" style="display: none;">
            <h1>Create Account</h1>
            <img src="https://placehold.co/600x300" alt="Artist hand holding a paintbrush about to touch a blank canvas" />
            <div class="form-group">
                <label for="register-name">Name</label>
                <input type="text" id="register-name" placeholder="Enter your name">
            </div>
            <div class="form-group">
                <label for="register-email">Email</label>
                <input type="email" id="register-email" placeholder="Enter your email">
            </div>
            <div class="form-group">
                <label for="register-password">Password</label>
                <input type="password" id="register-password" placeholder="Enter password">
            </div>
            <div class="form-group">
                <label for="register-confirm">Confirm Password</label>
                <input type="password" id="register-confirm" placeholder="Confirm password">
            </div>
            <button id="register-btn">Register</button>
            <div class="switch-form">
                <span>Already have an account? </span>
                <button id="show-login">Login</button>
            </div>
        </div>
    </div>

    <!-- App Section -->
    <div class="app-container" id="app-container">
        <div class="toolbar">
            <div class="tool-group">
                <button class="tool-btn" id="pencil-btn" data-tool="pencil">‚úèÔ∏è Pencil</button>
                <button class="tool-btn" id="eraser-btn" data-tool="eraser">üßΩ Eraser</button>
            </div>
            <div class="tool-group">
                <input type="color" id="color-picker" value="#000000">
                <input type="range" id="brush-size" min="1" max="50" value="5">
                <span id="brush-size-value">5px</span>
                <button class="tool-btn" id="clear-btn">üßπ Clear</button>
            </div>
            <div class="user-info">
                <span id="username-display">Welcome, User</span>
                <button class="logout-btn" id="logout-btn">Logout</button>
            </div>
        </div>
        <canvas id="drawing-canvas" width="800" height="500"></canvas>
    </div>

    <script>
        // Authentication System
        const authContainer = document.getElementById('auth-container');
        const appContainer = document.getElementById('app-container');
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const showRegisterBtn = document.getElementById('show-register');
        const showLoginBtn = document.getElementById('show-login');
        const loginBtn = document.getElementById('login-btn');
        const registerBtn = document.getElementById('register-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const usernameDisplay = document.getElementById('username-display');

        // Users database (in a real app, this would be server-side)
        let users = JSON.parse(localStorage.getItem('users')) || [];
        
        // Current user
        let currentUser = null;

        // Initialize the app
        function initApp() {
            // Check if user is logged in (session storage)
            const loggedInUser = sessionStorage.getItem('currentUser');
            if (loggedInUser) {
                currentUser = JSON.parse(loggedInUser);
                showApp();
            } else {
                showAuth();
            }
        }

        // Switch between login and register forms
        showRegisterBtn.addEventListener('click', () => {
            loginForm.style.display = 'none';
            registerForm.style.display = 'block';
        });

        showLoginBtn.addEventListener('click', () => {
            registerForm.style.display = 'none';
            loginForm.style.display = 'block';
        });

        // Login functionality
        loginBtn.addEventListener('click', () => {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            
            // Basic validation
            if (!email || !password) {
                alert('Please enter both email and password');
                return;
            }
            
            // Check user exists
            const user = users.find(u => u.email === email && u.password === password);
            
            if (user) {
                currentUser = { name: user.name, email: user.email };
                sessionStorage.setItem('currentUser', JSON.stringify(currentUser));
                showApp();
            } else {
                alert('Invalid credentials');
            }
        });

        // Register functionality
        registerBtn.addEventListener('click', () => {
            const name = document.getElementById('register-name').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            const confirm = document.getElementById('register-confirm').value;
            
            // Basic validation
            if (!name || !email || !password || !confirm) {
                alert('Please fill in all fields');
                return;
            }
            
            if (password !== confirm) {
                alert('Passwords do not match');
                return;
            }
            
            // Check if user already exists
            if (users.some(u => u.email === email)) {
                alert('Email already registered');
                return;
            }
            
            // Add new user
            const newUser = { name, email, password };
            users.push(newUser);
            localStorage.setItem('users', JSON.stringify(users));
            
            currentUser = { name, email };
            sessionStorage.setItem('currentUser', JSON.stringify(currentUser));
            showApp();
        });

        // Logout functionality
        logoutBtn.addEventListener('click', () => {
            sessionStorage.removeItem('currentUser');
            currentUser = null;
            showAuth();
        });

        // Show authentication UI
        function showAuth() {
            authContainer.style.display = 'block';
            appContainer.style.display = 'none';
            // Reset forms
            document.getElementById('login-form').style.display = 'block';
            document.getElementById('register-form').style.display = 'none';
            document.getElementById('login-email').value = '';
            document.getElementById('login-password').value = '';
        }

        // Show app UI
        function showApp() {
            authContainer.style.display = 'none';
            appContainer.style.display = 'block';
            usernameDisplay.textContent = `Welcome, ${currentUser.name}`;
            initDrawingApp();
        }

        // Drawing App
        function initDrawingApp() {
            const canvas = document.getElementById('drawing-canvas');
            const ctx = canvas.getContext('2d');
            const pencilBtn = document.getElementById('pencil-btn');
            const eraserBtn = document.getElementById('eraser-btn');
            const colorPicker = document.getElementById('color-picker');
            const brushSize = document.getElementById('brush-size');
            const brushSizeValue = document.getElementById('brush-size-value');
            const clearBtn = document.getElementById('clear-btn');

            let isDrawing = false;
            let currentTool = 'pencil';
            let currentColor = '#000000';
            let currentSize = 5;

            // Set active tool
            function setActiveTool(tool) {
                currentTool = tool;
                pencilBtn.classList.remove('active');
                eraserBtn.classList.remove('active');
                
                if (tool === 'pencil') {
                    pencilBtn.classList.add('active');
                    ctx.globalCompositeOperation = 'source-over';
                } else if (tool === 'eraser') {
                    eraserBtn.classList.add('active');
                    ctx.globalCompositeOperation = 'destination-out';
                }
            }

            // Start drawing
            function startDrawing(e) {
                isDrawing = true;
                draw(e);
            }

            // Stop drawing
            function stopDrawing() {
                isDrawing = false;
                ctx.beginPath();
            }

            // Draw on canvas
            function draw(e) {
                if (!isDrawing) return;

                ctx.lineWidth = currentSize;
                ctx.lineCap = 'round';
                ctx.strokeStyle = currentColor;

                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                ctx.lineTo(x, y);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(x, y);
            }

            // Clear canvas
            function clearCanvas() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }

            // Event listeners
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);

            pencilBtn.addEventListener('click', () => setActiveTool('pencil'));
            eraserBtn.addEventListener('click', () => setActiveTool('eraser'));
            
            colorPicker.addEventListener('input', () => {
                currentColor = colorPicker.value;
            });

            brushSize.addEventListener('input', () => {
                currentSize = brushSize.value;
                brushSizeValue.textContent = `${currentSize}px`;
            });

            clearBtn.addEventListener('click', clearCanvas);

            // Initialize
            setActiveTool('pencil');
            
            // Responsive canvas sizing
            function resizeCanvas() {
                const container = appContainer.getBoundingClientRect();
                const ratio = 800 / 500; // Original aspect ratio
                let newWidth = container.width * 0.9;
                let newHeight = newWidth / ratio;
                
                if (newHeight > window.innerHeight * 0.6) {
                    newHeight = window.innerHeight * 0.6;
                    newWidth = newHeight * ratio;
                }
                
                canvas.width = newWidth;
                canvas.height = newHeight;
                
                // Save and restore canvas content when resizing
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                tempCanvas.width = canvas.width;
                tempCanvas.height = canvas.height;
                tempCtx.drawImage(canvas, 0, 0);
                
                clearCanvas();
                ctx.drawImage(tempCanvas, 0, 0);
            }

            window.addEventListener('resize', resizeCanvas);
            resizeCanvas();
        }

        // Start the app
        initApp();
    </script>
</body>
</html>
